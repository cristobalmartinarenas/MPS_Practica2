TestsCases:
    DequeNodeTest:
        -ShouldGetCorrectElementAfterInitialized: Comprueba que el primer elemento está bien inicializado
        -ShouldNotHavePreviousAfterInitialized: Comprueba que el primer elemento no tiene elemento previo
        -ShouldNotHaveNextAfterAfterInitialized: Comprueba que no tiene elemento siguiente despues de inicializar
        -ShouldNotBeFirstNodeAfterInitialized: Comprueba que el nodo añadido no es el primero despues de inicializar
        -ShouldBeLastNodeAfterInitialized: Comprueba que es el ultimo nodo despues de inicializar
        -ShouldBeTerminalNodeAfterInitialized: Comprueba que no hay nodo intermedio despues de inicializar
        -ShouldAddNextElement: Comprueba que se inserta bien al siguiente en el constructor
        -ShouldAddPreviousElement: Comprueba que se inserta bien al anterior en el constructor
        -ShouldNotBeTerminalNodeIfHavePreviousAndNext: Comprueba que no es nodo terminal
        -ShouldSetItem: Comprueba que se asigne bien el Item
        -ShouldSetNext: Comprueba que se asigna bien el Siguiente
        -ShouldSetPrevious: Comprueba que se asigna bien el Anterior

    DoubleLinkedListQueueTest:
        -ShouldAppendANodeLastPosition: Comprueba que se inserte un nodo al final correctamente
        -ShouldAppendANodeFirstPositionEmptyList: Comprueba que se inserte un nodo al principio cuando la lista esta vacia
        -ShouldThrowAnExceptionIllegalArgumentWhenAppendNulls: Comprueba que se lance un error si se interta insertar un nodo nulo
        -ShouldAppendANodeFirstPosition: Comprueba que se inserte un nodo al principio correctamente
        -ShouldDeleteNodeFirstPosition: Comprueba que se elimine el primer nodo correctamente
        -ShouldBeEmptyIfDeleteAllElements: Comprueba que la lista esta vacia si se eliminan todos los elementos
        -ShouldBeEmptyIfDeleteAllFirstElements: Comprueba que la lista esta vacia si se eliminan todos los elementos por la izquierda
        -ShouldDeleteNodeLastPosition: Comprueba que se elimine el ultimo nodo correctamente
        -ShouldReturnTheSizeOfTheList: Comprueba que se obtenga el tamaño de la lista correctamente
        -ShouldReturn0IfTheListIsEmpty: Comprueba que se obtenga tamaño 0 si la lista esta vacia
        -ShouldReturnTheNodeAtTheGivenPosition: Comprueba que se obtiene el nodo en la posicion indicada
        -ShouldThrownAnIndexOutOfBoundsExceptionIfThePositionIsBiggerThanSize: Comprueba que se lance una excepcion si se intenta encontrar un nodo con un indice mayor que el tamaño de la lista
        -ShouldReturnTheNodeOfTheValue: Comprueba que se obtiene el nodo correcto al buscarlo por su valor
        -ShouldReturnNullIfTheNumberIsNotInTheList: Comprueba que se devuelva null si se intenta buscar un nodo con un valor que no esta en la lista
        -ShouldDeleteTheGivenNode: Comprueba que se borre el nodo dado de la lista
        -ShouldThrownAnExceptionIfTheNodeToDeleteIsNotInTheList: Comprueba que se devuelva una excepcion si se intenta borrar un nodo que no este en la lista
        -ShouldCorrectlySortList: Comprueba que se ordene la lista
        -ShouldCorrectlySortListMoreThan2Elements: Comprueba que se ordene la lista si tiene mas de 2 elementos